from telebot import TeleBot, types
from backend import Backend
from config_parser import ConfigParser
from typing import List, Dict, Any
import json
from datetime import datetime
import os

class Frontend:
    def __init__(self, bot: TeleBot):
        self.bot = bot
        self.backend = Backend()
        self.config = ConfigParser()
        self.admin_ids = self.config.get_admin_ids()
        
        self.user_states = {}
        self.temp_data = {}
    
    def is_admin(self, user_id: int, username: str) -> bool:
        return self.config.is_admin(user_id, username)
    
    def handle_start(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name or ""
        
        self.backend.register_user(user_id, username, first_name, last_name)

        if self.is_admin(user_id, username):
            self.backend.db.execute(
                "UPDATE users SET role = 'admin' WHERE user_id = ?",
                (user_id,)
            )
            self._show_admin_menu(message)
        else:
            role = self.backend.get_user_role(user_id)
            
            if role == 'driver':
                self._show_driver_menu(message)
            else:
                self.bot.send_message(
                    message.chat.id,
                    "üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
    
    def _show_admin_menu(self, message: types.Message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        markup.add("üöö –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è")
        markup.add("üì® –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        
        self.bot.send_message(
            message.chat.id,
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    
    def _show_driver_menu(self, message: types.Message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
        
        self.bot.send_message(
            message.chat.id,
            "üöö –ü–∞–Ω–µ–ª—å –≤–æ–¥–∏—Ç–µ–ª—è\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/my_orders - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=markup
        )
    
    def handle_admin_commands(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if message.text == "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel":
            self._handle_export_excel(message)
        elif message.text == "üöö –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è":
            self._start_add_driver(message)
        elif message.text == "üì® –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            self._start_create_broadcast(message)
        elif message.text == "üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π":
            self._handle_export_drivers(message)
        elif message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è":
            self._start_remove_driver(message)
    
    def _handle_export_users(self, message: types.Message):
        users_data = self.backend.export_users()
        if len(users_data) > 4096:
            for x in range(0, len(users_data), 4096):
                self.bot.send_message(message.chat.id, users_data[x:x+4096])
        else:
            self.bot.send_message(message.chat.id, users_data)
    
    def _handle_export_excel(self, message: types.Message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Excel", "üöö –í–æ–¥–∏—Ç–µ–ª–∏ Excel")
        markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        
        self.bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel:",
            reply_markup=markup
        )
    
    def handle_export_excel_choice(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if message.text == "üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Excel":
            self._export_users_excel(message)
        elif message.text == "üöö –í–æ–¥–∏—Ç–µ–ª–∏ Excel":
            self._export_drivers_excel(message)
        elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            self._show_admin_menu(message)
    
    def _export_users_excel(self, message: types.Message):
        try:
            filepath = self.backend.export_users_excel()
            if not filepath:
                self.bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            with open(filepath, 'rb') as file:
                self.bot.send_document(
                    message.chat.id,
                    file,
                    caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
            
            os.remove(filepath)
            
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
    
    def _export_drivers_excel(self, message: types.Message):
        try:
            filepath = self.backend.export_drivers_excel()
            if not filepath:
                self.bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            with open(filepath, 'rb') as file:
                self.bot.send_document(
                    message.chat.id,
                    file,
                    caption="üöö –≠–∫—Å–ø–æ—Ä—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π"
                )
            
            os.remove(filepath)
            
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
    
    def _handle_export_drivers(self, message: types.Message):
        drivers_data = self.backend.export_drivers()
        if len(drivers_data) > 4096:
            for x in range(0, len(drivers_data), 4096):
                self.bot.send_message(message.chat.id, drivers_data[x:x+4096])
        else:
            self.bot.send_message(message.chat.id, drivers_data)
    
    def _start_add_driver(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        self.user_states[message.from_user.id] = 'awaiting_driver_username'
        self.bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ username –≤–æ–¥–∏—Ç–µ–ª—è (–±–µ–∑ @):"
        )
    
    def _start_remove_driver(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        drivers = self.backend.get_all_drivers()
        
        if not drivers:
            self.bot.send_message(message.chat.id, "üö´ –ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        markup = types.InlineKeyboardMarkup()
        for driver in drivers:
            markup.add(types.InlineKeyboardButton(
                f"üóëÔ∏è {driver['full_name']} (@{driver['username']})",
                callback_data=f"remove_driver_{driver['username']}"
            ))
        
        self.bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )
    
    def handle_remove_driver(self, call: types.CallbackQuery):
        user_id = call.from_user.id
        username = call.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        driver_username = call.data.split('_')[2]
        
        success = self.backend.remove_driver(driver_username)
        
        if success:
            self.bot.answer_callback_query(call.id, "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            self.bot.edit_message_text(
                "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.bot.edit_message_text(
                "‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                call.message.chat.id,
                call.message.message_id
            )
    
    def handle_driver_registration(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            if user_id in self.user_states:
                del self.user_states[user_id]
            if user_id in self.temp_data:
                del self.temp_data[user_id]
            return
        
        state = self.user_states.get(user_id)
        
        if state == 'awaiting_driver_username':
            username_input = message.text.strip()
            if not username_input:
                self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username")
                return
            
            user = self.backend.db.fetch_one(
                "SELECT user_id FROM users WHERE username = ?", 
                (username_input,)
            )
            
            if not user:
                self.bot.send_message(
                    message.chat.id,
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_input} –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return
            
            driver_user_id = user['user_id']
            self.temp_data[user_id] = {'username': username_input, 'driver_user_id': driver_user_id}
            self.user_states[user_id] = 'awaiting_driver_fullname'
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è:")
        
        elif state == 'awaiting_driver_fullname':
            full_name = message.text.strip()
            self.temp_data[user_id]['full_name'] = full_name
            self.user_states[user_id] = 'awaiting_driver_phone'
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:")
        
        elif state == 'awaiting_driver_phone':
            phone = message.text.strip()
            self.temp_data[user_id]['phone'] = phone
            self.user_states[user_id] = 'awaiting_driver_group'
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("3 —Ç–æ–Ω–Ω—ã", "5 —Ç–æ–Ω–Ω", "5+ —Ç–æ–Ω–Ω")
            
            self.bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤–æ–¥–∏—Ç–µ–ª—è:",
                reply_markup=markup
            )
        
        elif state == 'awaiting_driver_group':
            group_text = message.text.strip()
            group_mapping = {
                '3 —Ç–æ–Ω–Ω—ã': '3_ton',
                '5 —Ç–æ–Ω–Ω': '5_ton',
                '5+ —Ç–æ–Ω–Ω': '5+_ton'
            }
            
            group_type = group_mapping.get(group_text)
            if not group_type:
                self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                return
            
            data = self.temp_data.get(user_id, {})
            driver_user_id = data.get('driver_user_id')
            full_name = data.get('full_name')
            phone = data.get('phone')
            
            try:
                self.backend.register_driver(driver_user_id, full_name, phone, group_type)
                
                del self.user_states[user_id]
                del self.temp_data[user_id]
                
                markup = types.ReplyKeyboardRemove()
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{group_text}'",
                    reply_markup=markup
                )
                self._show_admin_menu(message)
                
            except Exception as e:
                self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}")
    
    def _start_create_broadcast(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        self.user_states[message.from_user.id] = 'awaiting_broadcast_photos'
        self.temp_data[message.from_user.id] = {'photos': []}
        
        self.bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
    
    def handle_broadcast_photos(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            if user_id in self.user_states:
                del self.user_states[user_id]
            if user_id in self.temp_data:
                del self.temp_data[user_id]
            return
        
        if self.user_states.get(user_id) == 'awaiting_broadcast_photos':
            if message.photo:
                photo_id = message.photo[-1].file_id
                data = self.temp_data.get(user_id, {})
                photos = data.get('photos', [])
                
                if len(photos) < 6:
                    photos.append(photo_id)
                    data['photos'] = photos
                    self.temp_data[user_id] = data
                    
                    if len(photos) < 6:
                        self.bot.send_message(message.chat.id, f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ {6 - len(photos)} —Ñ–æ—Ç–æ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ–∫—Å—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /next")
                    else:
                        self.bot.send_message(message.chat.id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–∫—Å—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /next")
                else:
                    self.bot.send_message(message.chat.id, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 6 —Ñ–æ—Ç–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–∫—Å—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /next")
            
            elif message.text == '/skip':
                self.user_states[user_id] = 'awaiting_broadcast_text'
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
            
            elif message.text == '/next':
                self.user_states[user_id] = 'awaiting_broadcast_text'
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    
    def handle_broadcast_text(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            if user_id in self.user_states:
                del self.user_states[user_id]
            if user_id in self.temp_data:
                del self.temp_data[user_id]
            return
        
        if self.user_states.get(user_id) == 'awaiting_broadcast_text':
            text = message.text
            data = self.temp_data.get(user_id, {})
            data['text'] = text
            self.temp_data[user_id] = data
            self.user_states[user_id] = 'awaiting_broadcast_group'
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("3 —Ç–æ–Ω–Ω—ã", "5 —Ç–æ–Ω–Ω", "5+ —Ç–æ–Ω–Ω", "–í—Å–µ –≥—Ä—É–ø–ø—ã")
            
            self.bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=markup
            )
    
    def handle_broadcast_group(self, message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not self.is_admin(user_id, username):
            self.bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            if user_id in self.user_states:
                del self.user_states[user_id]
            if user_id in self.temp_data:
                del self.temp_data[user_id]
            return
        
        if self.user_states.get(user_id) == 'awaiting_broadcast_group':
            group_text = message.text.strip()
            group_mapping = {
                '3 —Ç–æ–Ω–Ω—ã': '3_ton',
                '5 —Ç–æ–Ω–Ω': '5_ton',
                '5+ —Ç–æ–Ω–Ω': '5+_ton',
                '–í—Å–µ –≥—Ä—É–ø–ø—ã': 'all'
            }
            
            group_type = group_mapping.get(group_text)
            if not group_type:
                self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                return
            
            data = self.temp_data.get(user_id, {})
            text = data.get('text', '')
            photos = data.get('photos', [])
            
            order_id = self.backend.create_order(user_id, text, group_type, photos)
            
            self._send_broadcast(order_id, group_type, text, photos)
            
            del self.user_states[user_id]
            del self.temp_data[user_id]
            
            markup = types.ReplyKeyboardRemove()
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–µ '{group_text}'",
                reply_markup=markup
            )
            self._show_admin_menu(message)
    
    def _send_broadcast(self, order_id: int, group_type: str, text: str, photos: List[str]):
        if group_type == 'all':
            groups = ['3_ton', '5_ton', '5+_ton']
        else:
            groups = [group_type]
        
        for group in groups:
            drivers = self.backend.get_drivers_by_group(group)
            for driver in drivers:
                try:
                    if photos:
                        media = [types.InputMediaPhoto(photo) for photo in photos]
                        media[0].caption = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}:\n\n{text}"
                        self.bot.send_media_group(driver['user_id'], media)
                    else:
                        self.bot.send_message(driver['user_id'], f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}:\n\n{text}")
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton(
                        "‚úÖ –í–∑—è—Ç—å –∑–∞–∫–∞–∑",
                        callback_data=f"accept_order_{order_id}"
                    ))
                    
                    self.bot.send_message(
                        driver['user_id'],
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑:",
                        reply_markup=markup
                    )
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—é {driver['user_id']}: {e}")
    
    def handle_order_accept(self, call: types.CallbackQuery):
        driver_id = call.from_user.id
        order_id = int(call.data.split('_')[2])
        
        driver = self.backend.get_driver_info(driver_id)
        if not driver:
            self.bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–æ–¥–∏—Ç–µ–ª–µ–º")
            return
        
        if self.backend.is_order_taken(order_id):
            self.bot.answer_callback_query(
                call.id, 
                "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º",
                show_alert=True
            )
            self.bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=None
            )
            self.bot.send_message(
                call.message.chat.id,
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º"
            )
            return
        
        success = self.backend.accept_order(order_id, driver_id)
        
        if not success:
            self.bot.answer_callback_query(
                call.id, 
                "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º",
                show_alert=True
            )
            self.bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=None
            )
            self.bot.send_message(
                call.message.chat.id,
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º"
            )
            return
        
        try:
            order = self.backend.get_order_info(order_id)
            if order:
                admin_id = order['admin_id']
                message_text = (
                    f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ #{order_id}:\n\n"
                    f"–ó–∞–∫–∞–∑: {order['description'][:100]}...\n"
                    f"–í–æ–¥–∏—Ç–µ–ª—å: {driver['full_name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver['phone']}\n"
                    f"Username: @{driver['username']}\n"
                    f"–ì—Ä—É–ø–ø–∞: {self._get_group_name(driver['group_type'])}\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                
                self.bot.send_message(admin_id, message_text)
            
            self.bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!")
            self.bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=None
            )
            self.bot.send_message(
                call.message.chat.id,
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!"
            )
            
        except Exception as e:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞")
    
    def handle_my_orders(self, message: types.Message):
        driver_id = message.from_user.id
        orders = self.backend.get_driver_orders_history(driver_id)
        
        if not orders:
            self.bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return
        
        response = "üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n"
        for i, order in enumerate(orders, 1):
            response += f"{i}. –ó–∞–∫–∞–∑ #{order['order_id']}\n"
            response += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {order['description'][:50]}...\n"
            response += f"   –ü—Ä–∏–Ω—è—Ç: {order['accepted_at']}\n"
            response += "‚îÄ" * 30 + "\n"
        
        self.bot.send_message(message.chat.id, response)
    
    def _get_group_name(self, group_type: str) -> str:
        group_names = {
            '3_ton': '3 —Ç–æ–Ω–Ω—ã',
            '5_ton': '5 —Ç–æ–Ω–Ω',
            '5+_ton': '5+ —Ç–æ–Ω–Ω'
        }
        return group_names.get(group_type, group_type)